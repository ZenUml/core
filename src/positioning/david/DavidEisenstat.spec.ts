import {find_optimal} from "@/positioning/david/DavidEisenstat";

describe('DavidEisenstat', () => {
  it.each([
    [[
      [0, 200, 0, 900],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
    ], [ 0, 300, 600, 900 ]],
    [[
      [0, 0, 2, 0, 0],
      [0, 0, 0, 5.5, 0],
      [0, 0, 0, 0, 8],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
    ], [ 0, 1, 2, 6.5, 10 ]],
    [[
      [0, 0, 200, 0],
      [0, 0, 0, 200],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
    ], [ 0, 0, 200, 200 ]],
    [[
      [0, 0, 200, 0],
      [0, 0, 0, 150],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
    ], [ 0, 50, 200, 200 ]],
    [[
      [0, 0, 200, 0],
      [0, 0, 0, 300],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
    ], [ 0, 0, 200, 300 ]],
  ])('should find optimal positions', (m, expected) => {
    expect(find_optimal(m)).toStrictEqual(expected)
  })
});
